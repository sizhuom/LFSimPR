function makeCamInc( camFile, meshFile, camParam )
%MAKECAMINC Make the camera .inc file for a light field camera

% compute the required transform
if isfield(camParam, 'R')
    R = camParam.R;
    t = camParam.t;
else
    if isfield(camParam, 'up')
        [R, t] = buildLookAt(camParam.pos, camParam.lookAt, camParam.up, true);
    else
        [R, t] = buildLookAt(camParam.pos, camParam.lookAt, [0;1;0], true);
    end
end
[R, t] = convertRHS(R, t);

cLocation = t;
cLookAtN = cLocation + R(:,3);
fUp = R(:,2);
fRight = R(:,1);

% create the .inc file
fout = fopen(camFile, 'w');
fprintf(fout, '#version 3.7;\n');
fprintf(fout, ['#include "math.inc"\n'...
    '#include "transforms.inc"\n']);
fprintf(fout, '#declare aa_rand=seed(78);\n');
fprintf(fout, ['#declare c_location=%s;\n'...
    '#declare c_look_at_n=%s;\n'...
    '#declare f_up=%s;\n'...
    '#declare f_right=%s;\n'],...
    printVec(cLocation), printVec(cLookAtN), printVec(fUp), printVec(fRight));
fprintf(fout, '#declare aa_samples=%d;\n', camParam.aaSamples);
fprintf(fout, '#declare xy_step=%f;\n', min(camParam.H(1,1),camParam.H(2,2)));
fprintf(fout, '#declare uv_step=%f;\n', min(camParam.H(3,3),camParam.H(4,4)));

fprintf(fout, [
    '#macro meshcam_matrix(c_lo, c_la, c_up)\n'...
    '#local cz = vnormalize(c_la-c_lo);\n'...
    '#local cx = vnormalize(vcross(c_up,cz));\n'...
    '#local cy = vcross(cz,cx);\n'...
    'matrix < cx.x, cx.y, cx.z,\n'...
    '  cy.x, cy.y, cy.z,\n'...
    '  cz.x, cz.y, cz.z,\n'...
    '  c_lo.x, c_lo.y, c_lo.z >\n'...
    '#end\n']);

fprintf(fout, '#include "%s"\n', meshFile);
fprintf(fout, 'camera{\n');
fprintf(fout, '  mesh_camera{ aa_samples+1 0\n');
fprintf(fout, ['    mesh{camera_mesh\n'...
    '      meshcam_matrix(c_location,c_look_at_n,f_up)\n'...
    '    }\n'...
    '    #declare i_samples=0;\n'...
    '    #while (i_samples<aa_samples)\n'...
    '      #declare c_xy_offset=((-f_up*.5+f_up*rand(aa_rand))*xy_step*i_samples/aa_samples)\n'...
    '                                      +((-f_right*.5+f_right*rand(aa_rand))*xy_step*i_samples/aa_samples);\n'...
    '      #declare c_uv_offset=((-f_up*.5+f_up*rand(aa_rand))*uv_step*i_samples/aa_samples)\n'...
    '                                      +((-f_right*.5+f_right*rand(aa_rand))*uv_step*i_samples/aa_samples);\n'...
    '      #declare c_location_tmp=c_location+c_xy_offset;\n'...
    '      #declare c_look_at_tmp=c_look_at_n+c_uv_offset;       \n'...
    '      mesh{camera_mesh\n'...
    '        meshcam_matrix(c_location_tmp,c_look_at_tmp,f_up)\n'...
    '      }\n'...
    '      #declare i_samples=i_samples+1;\n'...
    '    #end\n'...
    '  }\n'...
    '  location <0,0,0> \n'...
    '}\n']);
fclose(fout);
end

% helper functions that print a vector/matrix in POV-Ray format
function s = printVec( m )
s1 = sprintf('<%f', m(1));
s2 = sprintf(', %f', m(2:end));
s = [s1 s2 '>'];
end
